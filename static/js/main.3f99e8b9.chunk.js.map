{"version":3,"sources":["fbase.js","routes/Profile.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","components/Navigatin.js","components/AppRouter.js","components/App.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","authService","firebaseInstance","dbService","storageService","Profile","refreshUser","userObj","useState","displayName","newDisplayName","setNewDisplayName","history","useHistory","getMyTweets","a","collection","where","uid","orderBy","get","tweets","console","log","docs","map","doc","data","onSubmit","e","preventDefault","updateProfile","useEffect","className","onChange","value","target","type","autoFocus","placeholder","style","marginTop","onClick","signOut","push","AuthForm","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","name","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","required","Auth","onSocialClick","provider","auth","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","marginBottom","faGoogle","faGithub","Tweet","tweetObj","isOwner","editing","setEditing","text","newTweet","setNewTweet","onDeleteClick","window","confirm","id","delete","refFromURL","attachmentUrl","toggleEditing","prev","update","src","faTrash","faPencilAlt","TweetFactory","tweet","setTweet","attachment","setAttachment","attachmentRef","ref","child","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","add","maxLength","htmlFor","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","setTweets","onSnapshot","snapshot","nweetArray","key","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f99e8b9.chunk.js","sourcesContent":["// Firebase App (the core Firebase SDK) is always required and must be listed first\r\nimport * as firebase from \"firebase/app\";\r\nimport \"firebase/auth\"; //로그인 기능\r\nimport \"firebase/firestore\"; //데이터베이스 \r\nimport \"firebase/storage\"; //파일(이미지) 저장을 위한 스토리지\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCfvsTPImrVfYZJ_B3JADLcsQ_iaMA84vw\",\r\n  authDomain: \"twitter-b8dbd.firebaseapp.com\",\r\n  databaseURL: \"https://twitter-b8dbd.firebaseio.com\",\r\n  projectId: \"twitter-b8dbd\",\r\n  storageBucket: \"twitter-b8dbd.appspot.com\",\r\n  messagingSenderId: \"873019174526\",\r\n  appId: \"1:873019174526:web:da6f6d768e58e08f70322f\",\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const authService = firebase.auth();\r\n//로컬 로그인 기능만 사용하기위해\r\n\r\nexport const firebaseInstance = firebase;\r\n//깃허브, 구글 로그인 기능사용하기위해\r\n\r\nexport const dbService = firebase.firestore(); \r\n//db를 사용하기 위해\r\n\r\nexport const storageService = firebase.storage();\r\n//파일(이미지) 등록을 위한 스토리지","import { authService, dbService } from \"fbase\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst Profile = ({ refreshUser, userObj }) => {\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n\r\n  const history = useHistory();\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const getMyTweets = async () => {\r\n    // 로그인 사용자와 트윗User이 같을때만 가져오기위한 메소드\r\n    //where는 조건문\r\n    //데이터베이스 쿼리와 유사\r\n    const tweets = await dbService\r\n      .collection(\"tweets\")\r\n      .where(\"creatorId\", \"==\", userObj.uid)\r\n      .orderBy(\"createdAt\")\r\n      .get();\r\n\r\n    console.log(tweets.docs.map((doc) => doc.data()));\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const { value } = e.target;\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await userObj.updateProfile({\r\n        displayName: newDisplayName,\r\n      });\r\n      refreshUser();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getMyTweets();\r\n  }, []);\r\n  return (\r\n    <div className=\"container\">\r\n      <form onSubmit={onSubmit} className=\"profileForm\">\r\n        <input\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          autoFocus\r\n          placeholder=\"Display name\"\r\n          value={newDisplayName}\r\n          className=\"formInput\"\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Update Profile\"\r\n          className=\"formBtn\"\r\n          style={{\r\n            marginTop: 10,\r\n          }}\r\n        />\r\n      </form>\r\n\r\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n        Log Out\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\nexport default Profile;\r\n","import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst AuthForm = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [newAccount, setNewAccount] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const onChange = (e) => {\r\n    const { name, value } = e.target;\r\n    name === \"email\" ? setEmail(value) : setPassword(value);\r\n  };\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      let data;\r\n      if (newAccount) {\r\n        data = await authService.createUserWithEmailAndPassword(\r\n          email,\r\n          password\r\n        );\r\n      } else {\r\n        data = await authService.signInWithEmailAndPassword(email, password);\r\n      }\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  //sign in, newAccount 구별\r\n  const toggleAccount = () => {\r\n    setNewAccount(!newAccount);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit} className=\"container\">\r\n        <input\r\n          name=\"email\"\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n          value={email}\r\n          required\r\n          onChange={onChange}\r\n          className=\"authInput\"\r\n        />\r\n        <input\r\n          name=\"password\"\r\n          type=\"text\"\r\n          placeholder=\"Password\"\r\n          value={password}\r\n          required\r\n          onChange={onChange}\r\n          className=\"authInput\"\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value={newAccount ? \"Create Account\" : \"Sign In\"}\r\n          className=\"authInput authSubmit\"\r\n        />\r\n        {error && <span className=\"authError\">{error}</span>}\r\n      </form>\r\n\r\n      <span onClick={toggleAccount} className=\"authSwitch\">\r\n        {newAccount ? \"Sign In\" : \"Create Account\"}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import AuthForm from \"components/AuthForm\";\r\nimport { authService } from \"fbase\";\r\nimport { firebaseInstance } from \"fbase\";\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nconst Auth = () => {\r\n  const onSocialClick = async (e) => {\r\n    const { name } = e.target;\r\n    let provider;\r\n    if (name === \"google\") {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    } else if (name === \"github\") {\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n\r\n    await authService.signInWithPopup(provider);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"authContainer\">\r\n        <FontAwesomeIcon\r\n          icon={faTwitter}\r\n          color={\"#04AAFF\"}\r\n          size=\"3x\"\r\n          style={{ marginBottom: 30 }}\r\n        />\r\n\r\n        <AuthForm></AuthForm>\r\n\r\n        <div className=\"authBtns\">\r\n          <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n            Continue with Google <FontAwesomeIcon icon={faGoogle} />\r\n          </button>\r\n\r\n          <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n            Continue with Github <FontAwesomeIcon icon={faGithub} />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Auth;\r\n","import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Tweet = ({ tweetObj, isOwner }) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const [newTweet, setNewTweet] = useState(tweetObj.text);\r\n\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"Are you sure?\");\r\n\r\n    if (ok) {\r\n      await dbService.doc(`tweets/${tweetObj.id}`).delete();\r\n      await storageService.refFromURL(tweetObj.attachmentUrl).delete();\r\n    }\r\n  };\r\n\r\n  const toggleEditing = () => {\r\n    setEditing((prev) => !prev);\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    setNewTweet(e.target.value);\r\n  };\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    await dbService.doc(`tweets/${tweetObj.id}`).update({\r\n      text: newTweet,\r\n    });\r\n\r\n    toggleEditing();\r\n  };\r\n\r\n  return (\r\n    <div className=\"nweet\">\r\n      {editing ? (\r\n        <>\r\n          <form onSubmit={onSubmit} className=\"container nweetEdit\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Edit your nweet\"\r\n              value={newTweet}\r\n              required\r\n              autoFocus\r\n              onChange={onChange}\r\n              className=\"formInput\"\r\n            />\r\n\r\n            <input type=\"submit\" value=\"Update Nweet\" className=\"formBtn\" />\r\n          </form>\r\n\r\n          <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n            Cancel\r\n          </span>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h4>{newTweet}</h4>\r\n\r\n          {tweetObj.attachmentUrl && <img src={tweetObj.attachmentUrl} />}\r\n\r\n          {isOwner && (\r\n            <>\r\n              <div className=\"nweet__actions\">\r\n                <span onClick={onDeleteClick}>\r\n                  <FontAwesomeIcon icon={faTrash} />\r\n                </span>\r\n                <span onClick={toggleEditing}>\r\n                  <FontAwesomeIcon icon={faPencilAlt} />\r\n                </span>\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tweet;\r\n","import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\n//아이콘css작업\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n//랜덤값을 주기위해 npm install uuid함\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\n//tweets 생성 담당\r\nconst TweetFactory = ({ userObj }) => {\r\n  const [tweet, setTweet] = useState(\"\");\r\n  const [attachment, setAttachment] = useState(\"\");\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (tweet === \"\") {\r\n      return;\r\n    }\r\n\r\n    let attachmentUrl = \"\";\r\n    if (attachment !== \"\") {\r\n      //파일 이미지를 스토리지에 등록하고 해당 url을 리턴받음\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/${uuidv4()}`);\r\n      const response = await attachmentRef.putString(attachment, \"data_url\");\r\n      attachmentUrl = await response.ref.getDownloadURL();\r\n    }\r\n\r\n    const tweetObj = {\r\n      text: tweet,\r\n      createdAt: Date.now(),\r\n      creatorId: userObj.uid,\r\n      attachmentUrl, //이미지 파일 Url\r\n    };\r\n\r\n    // //firebase에 db에 테이블 생성\r\n    await dbService.collection(\"tweets\").add(tweetObj);\r\n    setTweet(\"\");\r\n    setAttachment(\"\");\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    setTweet(e.target.value);\r\n  };\r\n\r\n  const onFileChange = (e) => {\r\n    const { files } = e.target;\r\n    const theFile = files[0]; //파일 이미지 정보들을 가지고 있음\r\n    const reader = new FileReader(); //file 정보를 읽을 수 있도록 도와주는 객체\r\n    //이미지 파일을 url로 만들어줘서 사용할수있게끔...\r\n    reader.onloadend = (finishedEvent) => {\r\n      const { result } = finishedEvent.currentTarget;\r\n      setAttachment(result);\r\n    };\r\n    reader.readAsDataURL(theFile);\r\n  };\r\n\r\n  const onClearAttachment = () => {\r\n    setAttachment(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmit} className=\"factoryForm\">\r\n      <div className=\"factoryInput__container\">\r\n        <input\r\n          className=\"factoryInput__input\"\r\n          value={tweet}\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"What's on your mind?\"\r\n          maxLength={120}\r\n        />\r\n\r\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n        {/* <input type=\"file\" accept=\"image/*\" onChange={onFileChange} /> */}\r\n      </div>\r\n\r\n      <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\r\n        <span>Add photos</span>\r\n        <FontAwesomeIcon icon={faPlus} />\r\n      </label>\r\n\r\n      <input\r\n        id=\"attach-file\"\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        onChange={onFileChange}\r\n        style={{\r\n          opacity: 0,\r\n        }}\r\n      />\r\n\r\n      {attachment && (\r\n        <div className=\"factoryForm__attachment\">\r\n          <img\r\n            src={attachment}\r\n            style={{\r\n              backgroundImage: attachment,\r\n            }}\r\n          />\r\n          <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n            <span>Remove</span>\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TweetFactory;\r\n","import Tweet from \"components/Tweet\";\r\nimport TweetFactory from \"components/TweetFactory\";\r\nimport { dbService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [tweets, setTweets] = useState([]);\r\n\r\n  //db에 데이터 가져오는 첫번째 방법\r\n  //새로고침해야함\r\n\r\n  // const getTweets = async () => {\r\n  //   const dbTweets = await dbService.collection(\"tweets\").get();\r\n\r\n  //   //dbService에서 forEach 제공해줘서 사용( map은 제공 x)\r\n  //   dbTweets.forEach((document) => {\r\n  //     const newObject = {\r\n  //       ...document.data(),\r\n  //       id: document.id,\r\n  //     };\r\n  //     setTweets((prev) => [newObject, ...prev]);\r\n  //   });\r\n  // };\r\n\r\n  useEffect(() => {\r\n    //getTweets();\r\n\r\n    //db에 데이터 가져오는 두번째 방법\r\n    //db의 변화를 감지하는 메소드 이것을 통해\r\n    //실시간 변화 이용 새로고침 필요없다.\r\n    dbService.collection(\"tweets\").onSnapshot((snapshot) => {\r\n      const nweetArray = snapshot.docs.map((doc) => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setTweets(nweetArray);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <TweetFactory userObj={userObj}></TweetFactory>\r\n\r\n      <div style={{ marginTop: 30 }}>\r\n        {tweets.map((tweet) => (\r\n          <Tweet\r\n            key={tweet.id}\r\n            tweetObj={tweet}\r\n            isOwner={tweet.creatorId === userObj.uid}\r\n          ></Tweet>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Navigation = ({ userObj }) => {\r\n  return (\r\n    <>\r\n      <nav>\r\n        <ul\r\n          style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}\r\n        >\r\n          <li>\r\n            <Link to=\"/\" style={{ marginRight: 10 }}>\r\n              <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link\r\n              to=\"/profile\"\r\n              style={{\r\n                marginLeft: 10,\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                alignItems: \"center\",\r\n                fontSize: 12,\r\n              }}\r\n            >\r\n              <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n              <span style={{ marginTop: 10 }}>\r\n                {userObj.displayName\r\n                  ? `${userObj.displayName}의 Profile`\r\n                  : \"Profile\"}\r\n              </span>\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Profile from \"routes/Profile\";\r\nimport Auth from \"../routes/Auth\";\r\nimport Home from \"../routes/Home\";\r\nimport Navigation from \"./Navigatin\";\r\n\r\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\r\n  return (\r\n    <Router>\r\n      {isLoggedIn && <Navigation userObj={userObj}></Navigation>}\r\n      <Switch>\r\n        {isLoggedIn ? (\r\n          <>\r\n            <div\r\n              style={{\r\n                maxWidth: 890,\r\n                width: \"100%\",\r\n                margin: \"0 auto\",\r\n                marginTop: 80,\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <Route exact path=\"/\">\r\n                <Home userObj={userObj}></Home>\r\n              </Route>\r\n\r\n              <Route exact path=\"/profile\">\r\n                <Profile refreshUser={refreshUser} userObj={userObj}></Profile>\r\n              </Route>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Route exact path=\"/\">\r\n              <Auth></Auth>\r\n            </Route>\r\n          </>\r\n        )}\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import React, { useEffect, useState } from \"react\";\nimport AppRouter from \"components/AppRouter\";\nimport { authService } from \"fbase\";\n\nconst App = () => {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n\n  //(authService.currentUser); 로그인 여부체크 true,false\n\n  useEffect(() => {\n    //로그인의 변화를 체크해주는 메소드\n    //로그인을 하던 안하던 실행\n    //이렇게 안하면 auth 로그인기능을 가져오기 전에 리액트가 초기화 한다.\n    //쉽게말해 몇초있다 실행시킨다라는 의미..\n    //다른 component에서 로그인해도 알아서 변화를 가짐(상위컴포넌트이기 때문에?)\n    authService.onAuthStateChanged((user) => {\n      //로그인했을때\n      if (user) {\n        //setIsLoggedIn(true);\n        //setUserObj(user);\n\n        //Profile에서 user이름 바꾸기 위한 문장\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        //setIsLoggedIn(false);\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n        ></AppRouter>\n      ) : (\n        \"Initializing\"\n      )}\n      {/* <footer>&copy; {new Date().getFullYear()} Twitter</footer> */}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport \"style.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}